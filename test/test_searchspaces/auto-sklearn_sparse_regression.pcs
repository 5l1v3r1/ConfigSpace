one_hot_encoding:use_minimum_fraction {True, False} [True]
imputation:strategy {mean, median, most_frequent} [mean]
rescaling:__choice__ {none, min/max, standardize, normalize} [min/max]
preprocessor:__choice__ {densifier, extra_trees_preproc_for_regression, kernel_pca, kitchen_sinks, no_preprocessing, nystroem_sampler, random_trees_embedding, truncatedSVD} [no_preprocessing]
regressor:__choice__ {adaboost, ard_regression, decision_tree, extra_trees, gaussian_process, gradient_boosting, k_nearest_neighbors, liblinear_svr, libsvm_svr, random_forest, ridge_regression, sgd} [random_forest]
regressor:sgd:learning_rate {optimal, invscaling, constant} [optimal]
regressor:decision_tree:min_samples_leaf [1, 20] [1]i
regressor:k_nearest_neighbors:p {1, 2} [2]
regressor:extra_trees:min_samples_leaf [1, 20] [1]i
regressor:random_forest:bootstrap {True, False} [True]
regressor:liblinear_svr:intercept_scaling {1} [1]
regressor:decision_tree:splitter {best} [best]
regressor:gradient_boosting:n_estimators {100} [100]
regressor:libsvm_svr:kernel {linear, poly, rbf, sigmoid} [rbf]
regressor:extra_trees:max_features [0.5, 5.0] [1.0]
regressor:sgd:alpha [1e-06, 0.1] [0.01]l
regressor:ard_regression:alpha_2 [1e-10, 0.001] [1e-06]l
regressor:ard_regression:alpha_1 [1e-10, 0.001] [1e-06]
regressor:extra_trees:max_depth {None} [None]
regressor:extra_trees:n_estimators {100} [100]
regressor:gradient_boosting:max_features [0.5, 5.0] [1.0]
regressor:ridge_regression:tol [1e-05, 0.1] [0.0001]l
regressor:gradient_boosting:learning_rate [0.0001, 1.0] [0.1]l
regressor:liblinear_svr:C [0.03125, 32768.0] [1.0]l
regressor:random_forest:max_depth {None} [None]
regressor:liblinear_svr:tol [1e-05, 0.1] [0.0001]l
regressor:gradient_boosting:min_samples_split [2, 20] [2]i
regressor:k_nearest_neighbors:n_neighbors [1, 100] [1]il
regressor:random_forest:criterion {mse} [mse]
regressor:random_forest:max_features [0.5, 5.0] [1.0]
regressor:gaussian_process:thetaU [0.2, 10.0] [1.0]l
regressor:random_forest:min_weight_fraction_leaf {0.0} [0.0]
regressor:gradient_boosting:max_leaf_nodes {None} [None]
regressor:ard_regression:n_iter {300} [300]
regressor:gradient_boosting:max_depth [1, 10] [3]i
regressor:decision_tree:max_depth [0.0, 2.0] [0.5]
regressor:libsvm_svr:epsilon [0.001, 1.0] [0.1]l
regressor:sgd:loss {squared_loss, huber, epsilon_insensitive, squared_epsilon_insensitive} [squared_loss]
regressor:liblinear_svr:fit_intercept {True} [True]
regressor:decision_tree:criterion {mse} [mse]
regressor:sgd:eta0 [1e-07, 0.1] [0.01]
regressor:sgd:average {False, True} [False]
regressor:gradient_boosting:subsample [0.01, 1.0] [1.0]
regressor:ridge_regression:alpha [1e-05, 10.0] [1.0]l
regressor:adaboost:learning_rate [0.0001, 2.0] [0.1]l
regressor:random_forest:max_leaf_nodes {None} [None]
regressor:gaussian_process:thetaL [1e-06, 0.001] [0.0001]l
regressor:adaboost:max_depth [1, 10] [1]i
regressor:random_forest:min_samples_split [2, 20] [2]i
regressor:decision_tree:max_leaf_nodes {None} [None]
regressor:ard_regression:threshold_lambda [1000.0, 100000.0] [10000.0]l
regressor:adaboost:loss {linear, square, exponential} [linear]
regressor:gradient_boosting:min_samples_leaf [1, 20] [1]i
regressor:random_forest:min_samples_leaf [1, 20] [1]i
regressor:decision_tree:min_weight_fraction_leaf {0.0} [0.0]
regressor:k_nearest_neighbors:weights {uniform, distance} [uniform]
regressor:liblinear_svr:epsilon [0.001, 1.0] [0.1]l
regressor:decision_tree:max_features {1.0} [1.0]
regressor:gaussian_process:nugget [0.0001, 10.0] [0.1]l
regressor:sgd:fit_intercept {True} [True]
regressor:libsvm_svr:max_iter {-1} [-1]
regressor:libsvm_svr:C [0.03125, 32768.0] [1.0]l
regressor:random_forest:n_estimators {100} [100]
regressor:libsvm_svr:shrinking {True, False} [True]
regressor:extra_trees:bootstrap {True, False} [False]
regressor:sgd:penalty {l1, l2, elasticnet} [l2]
regressor:decision_tree:min_samples_split [2, 20] [2]i
regressor:libsvm_svr:tol [1e-05, 0.1] [0.001]l
regressor:gradient_boosting:loss {ls, lad, huber, quantile} [ls]
regressor:extra_trees:min_samples_split [2, 20] [2]i
regressor:ard_regression:fit_intercept {True} [True]
regressor:ard_regression:tol [1e-05, 0.1] [0.0001]l
regressor:ard_regression:lambda_1 [1e-10, 0.001] [1e-06]l
regressor:ridge_regression:fit_intercept {True} [True]
regressor:ard_regression:lambda_2 [1e-10, 0.001] [1e-06]l
regressor:liblinear_svr:loss {epsilon_insensitive, squared_epsilon_insensitive} [squared_epsilon_insensitive]
regressor:sgd:n_iter [5, 1000] [20]il
regressor:adaboost:n_estimators [50, 500] [50]i
regressor:liblinear_svr:dual {False} [False]
regressor:extra_trees:criterion {mse} [mse]
regressor:gradient_boosting:min_weight_fraction_leaf {0.0} [0.0]
preprocessor:random_trees_embedding:max_depth [2, 10] [5]i
preprocessor:nystroem_sampler:n_components [50, 10000] [100]il
preprocessor:extra_trees_preproc_for_regression:n_estimators {100} [100]
preprocessor:kernel_pca:kernel {poly, rbf, sigmoid, cosine} [rbf]
preprocessor:extra_trees_preproc_for_regression:criterion {mse} [mse]
preprocessor:extra_trees_preproc_for_regression:bootstrap {True, False} [False]
preprocessor:random_trees_embedding:min_samples_split [2, 20] [2]i
preprocessor:extra_trees_preproc_for_regression:min_samples_leaf [1, 20] [1]i
preprocessor:kitchen_sinks:gamma [0.3, 2.0] [1.0]
preprocessor:random_trees_embedding:n_estimators [10, 100] [10]i
preprocessor:truncatedSVD:target_dim [10, 256] [128]i
preprocessor:random_trees_embedding:min_weight_fraction_leaf {1.0} [1.0]
preprocessor:random_trees_embedding:min_samples_leaf [1, 20] [1]i
preprocessor:random_trees_embedding:max_leaf_nodes {None} [None]
preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf {0.0} [0.0]
preprocessor:nystroem_sampler:kernel {poly, rbf, sigmoid, cosine} [rbf]
preprocessor:extra_trees_preproc_for_regression:min_samples_split [2, 20] [2]i
preprocessor:kitchen_sinks:n_components [50, 10000] [100]il
preprocessor:extra_trees_preproc_for_regression:max_features [0.5, 5.0] [1.0]
preprocessor:kernel_pca:n_components [10, 2000] [100]i
preprocessor:extra_trees_preproc_for_regression:max_depth {None} [None]
one_hot_encoding:minimum_fraction [0.0001, 0.5] [0.01]l
preprocessor:nystroem_sampler:degree [2, 5] [3]i
preprocessor:nystroem_sampler:coef0 [-1.0, 1.0] [0.0]
preprocessor:nystroem_sampler:gamma [3.0517578125e-05, 8.0] [0.1]l
preprocessor:kernel_pca:degree [2, 5] [3]i
preprocessor:kernel_pca:coef0 [-1.0, 1.0] [0.0]
preprocessor:kernel_pca:gamma [3.0517578125e-05, 8.0] [1.0]l
regressor:sgd:power_t [1e-05, 1.0] [0.5]
regressor:sgd:l1_ratio [1e-09, 1.0] [0.15]l
regressor:sgd:epsilon [1e-05, 0.1] [0.0001]l
regressor:libsvm_svr:degree [1, 5] [3]i
regressor:libsvm_svr:gamma [3.0517578125e-05, 8.0] [0.1]l
regressor:libsvm_svr:coef0 [-1.0, 1.0] [0.0]
regressor:gradient_boosting:alpha [0.75, 0.99] [0.9]

one_hot_encoding:minimum_fraction | one_hot_encoding:use_minimum_fraction in {True}
preprocessor:extra_trees_preproc_for_regression:min_weight_fraction_leaf | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:extra_trees_preproc_for_regression:min_samples_split | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:kernel_pca:n_components | preprocessor:__choice__ in {kernel_pca}
preprocessor:extra_trees_preproc_for_regression:n_estimators | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:truncatedSVD:target_dim | preprocessor:__choice__ in {truncatedSVD}
preprocessor:random_trees_embedding:min_samples_leaf | preprocessor:__choice__ in {random_trees_embedding}
preprocessor:kernel_pca:kernel | preprocessor:__choice__ in {kernel_pca}
preprocessor:random_trees_embedding:min_weight_fraction_leaf | preprocessor:__choice__ in {random_trees_embedding}
preprocessor:kitchen_sinks:gamma | preprocessor:__choice__ in {kitchen_sinks}
preprocessor:extra_trees_preproc_for_regression:bootstrap | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:random_trees_embedding:min_samples_split | preprocessor:__choice__ in {random_trees_embedding}
preprocessor:kitchen_sinks:n_components | preprocessor:__choice__ in {kitchen_sinks}
preprocessor:extra_trees_preproc_for_regression:max_features | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:extra_trees_preproc_for_regression:min_samples_leaf | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:nystroem_sampler:kernel | preprocessor:__choice__ in {nystroem_sampler}
preprocessor:random_trees_embedding:max_depth | preprocessor:__choice__ in {random_trees_embedding}
preprocessor:extra_trees_preproc_for_regression:max_depth | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:extra_trees_preproc_for_regression:criterion | preprocessor:__choice__ in {extra_trees_preproc_for_regression}
preprocessor:random_trees_embedding:n_estimators | preprocessor:__choice__ in {random_trees_embedding}
preprocessor:nystroem_sampler:n_components | preprocessor:__choice__ in {nystroem_sampler}
preprocessor:random_trees_embedding:max_leaf_nodes | preprocessor:__choice__ in {random_trees_embedding}
regressor:extra_trees:n_estimators | regressor:__choice__ in {extra_trees}
regressor:k_nearest_neighbors:n_neighbors | regressor:__choice__ in {k_nearest_neighbors}
regressor:random_forest:n_estimators | regressor:__choice__ in {random_forest}
regressor:gradient_boosting:learning_rate | regressor:__choice__ in {gradient_boosting}
regressor:liblinear_svr:tol | regressor:__choice__ in {liblinear_svr}
regressor:gradient_boosting:min_samples_leaf | regressor:__choice__ in {gradient_boosting}
regressor:gradient_boosting:loss | regressor:__choice__ in {gradient_boosting}
regressor:k_nearest_neighbors:weights | regressor:__choice__ in {k_nearest_neighbors}
regressor:extra_trees:bootstrap | regressor:__choice__ in {extra_trees}
regressor:random_forest:min_samples_leaf | regressor:__choice__ in {random_forest}
regressor:ard_regression:n_iter | regressor:__choice__ in {ard_regression}
regressor:decision_tree:criterion | regressor:__choice__ in {decision_tree}
regressor:sgd:learning_rate | regressor:__choice__ in {sgd}
regressor:random_forest:max_features | regressor:__choice__ in {random_forest}
regressor:ridge_regression:tol | regressor:__choice__ in {ridge_regression}
regressor:extra_trees:max_features | regressor:__choice__ in {extra_trees}
regressor:gradient_boosting:min_weight_fraction_leaf | regressor:__choice__ in {gradient_boosting}
regressor:gradient_boosting:max_depth | regressor:__choice__ in {gradient_boosting}
regressor:sgd:average | regressor:__choice__ in {sgd}
regressor:random_forest:min_weight_fraction_leaf | regressor:__choice__ in {random_forest}
regressor:decision_tree:min_samples_leaf | regressor:__choice__ in {decision_tree}
regressor:liblinear_svr:epsilon | regressor:__choice__ in {liblinear_svr}
regressor:libsvm_svr:shrinking | regressor:__choice__ in {libsvm_svr}
regressor:sgd:loss | regressor:__choice__ in {sgd}
regressor:k_nearest_neighbors:p | regressor:__choice__ in {k_nearest_neighbors}
regressor:random_forest:min_samples_split | regressor:__choice__ in {random_forest}
regressor:libsvm_svr:tol | regressor:__choice__ in {libsvm_svr}
regressor:extra_trees:max_depth | regressor:__choice__ in {extra_trees}
regressor:gradient_boosting:min_samples_split | regressor:__choice__ in {gradient_boosting}
regressor:ridge_regression:alpha | regressor:__choice__ in {ridge_regression}
regressor:decision_tree:splitter | regressor:__choice__ in {decision_tree}
regressor:decision_tree:max_depth | regressor:__choice__ in {decision_tree}
regressor:adaboost:loss | regressor:__choice__ in {adaboost}
regressor:random_forest:criterion | regressor:__choice__ in {random_forest}
regressor:sgd:alpha | regressor:__choice__ in {sgd}
regressor:gaussian_process:nugget | regressor:__choice__ in {gaussian_process}
regressor:libsvm_svr:epsilon | regressor:__choice__ in {libsvm_svr}
regressor:ard_regression:tol | regressor:__choice__ in {ard_regression}
regressor:liblinear_svr:loss | regressor:__choice__ in {liblinear_svr}
regressor:random_forest:max_depth | regressor:__choice__ in {random_forest}
regressor:ard_regression:threshold_lambda | regressor:__choice__ in {ard_regression}
regressor:sgd:eta0 | regressor:__choice__ in {sgd}
regressor:extra_trees:criterion | regressor:__choice__ in {extra_trees}
regressor:gaussian_process:thetaL | regressor:__choice__ in {gaussian_process}
regressor:gradient_boosting:max_leaf_nodes | regressor:__choice__ in {gradient_boosting}
regressor:sgd:fit_intercept | regressor:__choice__ in {sgd}
regressor:libsvm_svr:C | regressor:__choice__ in {libsvm_svr}
regressor:sgd:n_iter | regressor:__choice__ in {sgd}
regressor:decision_tree:min_samples_split | regressor:__choice__ in {decision_tree}
regressor:sgd:penalty | regressor:__choice__ in {sgd}
regressor:ard_regression:fit_intercept | regressor:__choice__ in {ard_regression}
regressor:liblinear_svr:C | regressor:__choice__ in {liblinear_svr}
regressor:adaboost:n_estimators | regressor:__choice__ in {adaboost}
regressor:random_forest:bootstrap | regressor:__choice__ in {random_forest}
regressor:libsvm_svr:kernel | regressor:__choice__ in {libsvm_svr}
regressor:ard_regression:lambda_2 | regressor:__choice__ in {ard_regression}
regressor:ard_regression:alpha_1 | regressor:__choice__ in {ard_regression}
regressor:decision_tree:max_leaf_nodes | regressor:__choice__ in {decision_tree}
regressor:ard_regression:lambda_1 | regressor:__choice__ in {ard_regression}
regressor:random_forest:max_leaf_nodes | regressor:__choice__ in {random_forest}
regressor:extra_trees:min_samples_leaf | regressor:__choice__ in {extra_trees}
regressor:liblinear_svr:dual | regressor:__choice__ in {liblinear_svr}
regressor:decision_tree:max_features | regressor:__choice__ in {decision_tree}
regressor:decision_tree:min_weight_fraction_leaf | regressor:__choice__ in {decision_tree}
regressor:ridge_regression:fit_intercept | regressor:__choice__ in {ridge_regression}
regressor:gaussian_process:thetaU | regressor:__choice__ in {gaussian_process}
regressor:gradient_boosting:max_features | regressor:__choice__ in {gradient_boosting}
regressor:adaboost:max_depth | regressor:__choice__ in {adaboost}
regressor:ard_regression:alpha_2 | regressor:__choice__ in {ard_regression}
regressor:gradient_boosting:subsample | regressor:__choice__ in {gradient_boosting}
regressor:adaboost:learning_rate | regressor:__choice__ in {adaboost}
regressor:liblinear_svr:intercept_scaling | regressor:__choice__ in {liblinear_svr}
regressor:libsvm_svr:max_iter | regressor:__choice__ in {libsvm_svr}
regressor:liblinear_svr:fit_intercept | regressor:__choice__ in {liblinear_svr}
regressor:gradient_boosting:n_estimators | regressor:__choice__ in {gradient_boosting}
regressor:extra_trees:min_samples_split | regressor:__choice__ in {extra_trees}
regressor:sgd:power_t | regressor:sgd:learning_rate in {invscaling}
regressor:libsvm_svr:degree | regressor:libsvm_svr:kernel in {poly, rbf, sigmoid}
regressor:libsvm_svr:coef0 | regressor:libsvm_svr:kernel in {poly, sigmoid}
regressor:libsvm_svr:gamma | regressor:libsvm_svr:kernel in {poly, rbf}
regressor:sgd:epsilon | regressor:sgd:loss in {huber, epsilon_insensitive, squared_epsilon_insensitive}
regressor:sgd:l1_ratio | regressor:sgd:penalty in {elasticnet}
regressor:gradient_boosting:alpha | regressor:gradient_boosting:loss in {huber, quantile}
preprocessor:kernel_pca:degree | preprocessor:kernel_pca:kernel in {poly}
preprocessor:kernel_pca:gamma | preprocessor:kernel_pca:kernel in {poly, rbf}
preprocessor:kernel_pca:coef0 | preprocessor:kernel_pca:kernel in {poly, sigmoid}
preprocessor:nystroem_sampler:degree | preprocessor:nystroem_sampler:kernel in {poly}
preprocessor:nystroem_sampler:gamma | preprocessor:nystroem_sampler:kernel in {poly, rbf, sigmoid}
preprocessor:nystroem_sampler:coef0 | preprocessor:nystroem_sampler:kernel in {poly, sigmoid}

{preprocessor:__choice__=extra_trees_preproc_for_regression, regressor:__choice__=ard_regression}
{preprocessor:__choice__=extra_trees_preproc_for_regression, regressor:__choice__=gaussian_process}
{preprocessor:__choice__=extra_trees_preproc_for_regression, regressor:__choice__=gradient_boosting}
{preprocessor:__choice__=kitchen_sinks, regressor:__choice__=ard_regression}
{preprocessor:__choice__=kitchen_sinks, regressor:__choice__=gaussian_process}
{preprocessor:__choice__=kitchen_sinks, regressor:__choice__=gradient_boosting}
{preprocessor:__choice__=no_preprocessing, regressor:__choice__=ard_regression}
{preprocessor:__choice__=no_preprocessing, regressor:__choice__=gaussian_process}
{preprocessor:__choice__=no_preprocessing, regressor:__choice__=gradient_boosting}
{preprocessor:__choice__=nystroem_sampler, regressor:__choice__=ard_regression}
{preprocessor:__choice__=nystroem_sampler, regressor:__choice__=gaussian_process}
{preprocessor:__choice__=nystroem_sampler, regressor:__choice__=gradient_boosting}
{preprocessor:__choice__=random_trees_embedding, regressor:__choice__=ard_regression}
{preprocessor:__choice__=random_trees_embedding, regressor:__choice__=gaussian_process}
{preprocessor:__choice__=random_trees_embedding, regressor:__choice__=gradient_boosting}
{regressor:__choice__=adaboost, preprocessor:__choice__=densifier}
{regressor:__choice__=adaboost, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=adaboost, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=adaboost, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=decision_tree, preprocessor:__choice__=densifier}
{regressor:__choice__=decision_tree, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=decision_tree, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=decision_tree, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=extra_trees, preprocessor:__choice__=densifier}
{regressor:__choice__=extra_trees, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=extra_trees, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=extra_trees, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=gaussian_process, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=gaussian_process, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=gaussian_process, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=gradient_boosting, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=gradient_boosting, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=gradient_boosting, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=k_nearest_neighbors, preprocessor:__choice__=densifier}
{regressor:__choice__=k_nearest_neighbors, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=k_nearest_neighbors, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=k_nearest_neighbors, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=liblinear_svr, preprocessor:__choice__=densifier}
{regressor:__choice__=libsvm_svr, preprocessor:__choice__=densifier}
{regressor:__choice__=random_forest, preprocessor:__choice__=densifier}
{regressor:__choice__=random_forest, preprocessor:__choice__=kernel_pca}
{regressor:__choice__=random_forest, preprocessor:__choice__=kitchen_sinks}
{regressor:__choice__=random_forest, preprocessor:__choice__=nystroem_sampler}
{regressor:__choice__=ridge_regression, preprocessor:__choice__=densifier}
{regressor:__choice__=sgd, preprocessor:__choice__=densifier}
{regressor:liblinear_svr:dual=False, regressor:liblinear_svr:loss=epsilon_insensitive}
